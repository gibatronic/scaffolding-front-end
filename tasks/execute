COLOR_GREEN='\033[32m'
COLOR_RED='\033[31m'
COLOR_RESET='\033[0m'
COLOR_YELLOW='\033[33m'
CURSOR_HIDE='\033[?25l'
CURSOR_RESET='\033[999D'
CURSOR_SHOW='\033[?25h'
SPINNER_FRAMES=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
SPINNER_INDEX=0
SYMBOL_DONE='✓'
SYMBOL_FAIL='✖'

FUNCTIONS=$(declare -F | cut -d ' ' -f 3 | grep main)
SPINNER_LENGTH=${#SPINNER_FRAMES[@]}
TASK_NAME=$(basename $0)
TASK_LOG="${TASK_NAME}.log"

abort() {
  [ -n "$SPINNER_PID" ] && kill $SPINNER_PID &> /dev/null
  echo -e $CURSOR_SHOW
  exit 0
}

execute() {
  echo -en $CURSOR_HIDE

  for FUNCTION in $FUNCTIONS; do
    header
    spinner &
    SPINNER_PID=$!

    $FUNCTION &> $TASK_LOG
    EXIT_CODE=$?

    kill $SPINNER_PID &> /dev/null
    wait $SPINNER_PID &> /dev/null
    footer
  done

  echo -en $CURSOR_SHOW
}

footer() {
  echo -en $CURSOR_RESET

  if [ $EXIT_CODE == 0 ]; then
    echo -e "${COLOR_GREEN}${SYMBOL_DONE}${COLOR_RESET}"
  else
    echo -e "${COLOR_RED}${SYMBOL_FAIL}${COLOR_RESET}"
    [ -r $TASK_LOG ] && cat $TASK_LOG
    exit 1
  fi

  [ -r $TASK_LOG ] && rm $TASK_LOG
}

header() {
  FUNCTION_NAME=${FUNCTION#main_}

  echo -n "  ${TASK_NAME/_/ } "

  if [ "$FUNCTION_NAME" != 'main' ]; then
    echo -n "${FUNCTION_NAME/_/ } "
  fi
}

spinner() {
  while true; do
    let 'SPINNER_INDEX=++SPINNER_INDEX % SPINNER_LENGTH'
    echo -en "${CURSOR_RESET}${COLOR_YELLOW}${SPINNER_FRAMES[$SPINNER_INDEX]}${COLOR_RESET}"
    sleep 0.05
  done
}

trap abort SIGINT
execute
